
* {
  padding: 0;
  background-clip: padding-box;

  -GtkToolButton-icon-spacing: 4;
  -GtkTextView-error-underline-color: $error;

  // The size for scrollbars. The slider is 2px smaller, but we keep it
  // up so that the whole area is sensitive to button presses for the
  // slider. The stepper button is larger in both directions, the slider
  // only in the width

  -GtkScrolledWindow-scrollbar-spacing: 0;
  -GtkToolItemGroup-expander-size: 11;

  -GtkWidget-text-handle-width: 24;
  -GtkWidget-text-handle-height: 24;

  -GtkDialog-button-spacing: 4;
  -GtkDialog-action-area-border: 0;

  // We use the outline properties to signal the focus properties
  // to the adwaita engine: using real CSS properties is faster,
  // and we don't use any outlines for now.

  outline-style: solid;
  outline-width: 2px;
  outline-color: $overlay-active;
  outline-offset: -4px;
  -gtk-outline-radius: $button_radius;

  -gtk-secondary-caret-color: $primary;
}


//
// Base States
//
.background {
  background-color: $background;
  color: $text;
}

*:disabled { -gtk-icon-effect: dim; }

.gtkstyle-fallback {
  background-color: $background;
  color: $text;

  &:hover {
    background-color: darken($background, 5%);
    color: $text;
  }

  &:active {
    background-color: darken($background, 10%);
    color: $text;
  }

  &:disabled {
    background-color: $background;
    color: $text-disabled;
  }

  &:selected {
    background-color: $primary;
    color: on($primary);
  }
}

%view, .view {
  background-color: $base;
  color: $text;

  &:hover {
    background-color: $overlay-hover;
    color: $text;
  }

  &:disabled { color: $text-disabled; }

  &:selected {
    @extend %selected_items;
  }
}

textview {
  text {
    background-color: $base;
    color: $text;

    &:disabled { color: $text-disabled; }

    selection { @extend %selected_items; }
  }
}

textview border {
  background-color: $base_alt;
  color: $text-disabled;
}

iconview {
  @extend %view;
  &:hover, &:active, &:selected { border-radius: $button_radius; }
}

.rubberband,
rubberband {
  border: 1px solid $primary;
  background-color: gtkalpha($primary, 0.3);
}

flowbox {
  rubberband { @extend rubberband; }

  flowboxchild {
    outline-offset: -2px;
    padding: 4px;
    border-radius: 2px;

    &:selected { @extend %selected_items; }
  }
}

label {
  caret-color: currentColor; // this shouldn't be needed.

  &.separator {
    @extend .dim-label;

    color: $text;
  }

  row:selected &,
  &:selected {
    color: on($primary);

    &:disabled { color: on($primary, disabled); }
  }

  selection {
    background-color: $primary;
    color: on($primary);
  }

  &:disabled {
    color: $text-disabled;

    selection { color: on($primary, disabled); }

    tab &,
    button &,
    menuitem & { color: inherit; }
  }
}

.dim-label { color: $text-secondary; }

assistant {
  .sidebar {
    padding: 4px 0;
  }

  .sidebar label {
    min-height: $medium_size;
    padding: 0 12px;
    color: $text-disabled;
    font-weight: 500;

    &.highlight { color: $text; }
  }
}

//
// Spinner Animation
//
@keyframes spin {
  to { -gtk-icon-transform: rotate(1turn); }
}

@keyframes spin_colors {
  1% { color: $info; } 25% { color: $info; }
  26% { color: $question; } 50% { color: $question; }
  51% { color: $warning; } 75% { color: $warning; }
  76% { color: $error; } 100% { color: $error; }
}

spinner {
  background: none;
  opacity: 0; // non spinning spinner makes no sense
  -gtk-icon-source: -gtk-icontheme('process-working-symbolic');

  &:checked {
    opacity: 1;
    animation: spin 1s linear infinite;

    &:disabled { opacity: 0.3; }
  }
}


//
// Entries
//
%flat_entry {
  @include entry(flat-normal);
  border-radius: 0;
  &:focus { @include entry(flat-focus); }
  &:drop(active) { @include entry(flat-hover); }
  &:disabled { @include entry(flat-disabled); }
}

%entry_fallback {
  &, &.flat {
    @include entry(fallback-normal);
    &:focus { @include entry(fallback-focus); }
    &:disabled { @include entry(fallback-disabled); }
  }
}

%entry_native {
  @include entry(normal);
  &:focus { @include entry(focus); }
  &:disabled { @include entry(disabled); }

  &.flat { @extend %flat_entry; }
}

entry {
  min-height: $medium_size;
  padding: 0 8px;

  // fallback entries for non-native apps
  // @extend %entry_fallback;

  // standard entries for native Gtk+ apps
  @extend %entry_native;

  // standard linked-entries for native Gtk+ apps
  .linked > &,
  .linked.vertical > &,
  .linked > &.flat,
  .linked.vertical > &.flat {
    @extend %flat_entry;
  }

  image { // icons inside the entry
    color: gtkalpha(currentColor, 0.9);

    &:hover, &:active { color: currentColor; }

    &:disabled { color: gtkalpha(currentColor, 0.45); }

     &.left {
      margin-left: ($medium_size - 16px) / 2 - 8px;
      margin-right: $space_size;
    }

    &.right {
      margin-left: $space_size;
      margin-right: ($medium_size - 16px) / 2 - 8px;
    }
  }

  undershoot {
    &.left { @include undershoot(left); }

    &.right { @include undershoot(right); }
  }

  selection { @extend %selected_items; }

  // entry error and warning style
  @each $e_type, $e_color in (error, $error),
                             (warning, $warning) {
    &.#{$e_type}, &.search.#{$e_type} {
      @include entry(normal, $e_color);

      &:focus { @include entry(focus, $e_color); }

      &:disabled { @include entry(disabled, $e_color); }

      &.flat {
        @include entry(flat-normal, $e_color);

        &:focus { @include entry(flat-focus, $e_color); }

        &:disabled { @include entry(flat-disabled, $e_color); }
      }
    }
  }

  &.cell {
    @extend %entry_fallback;
  }

  &.entry-tag { // for libgd apps
    padding: 0 8px;
    border-radius: $circular_radius;
    box-shadow: none;
    background-color: $primary;
    color: on($primary);

    &:hover { box-shadow: $shadow_1; }

    &:dir(ltr) { margin: 3px -4px 3px 8px; }
    &:dir(rtl) { margin: 3px 8px 3px -4px; }

    &.button {
      &, &:hover, &:active { // unset styling
        background-color: transparent;
        background-image: none;
        border-image: none;
        border: none;
        box-shadow: none;
        animation: none;
        margin: 0 -2px;
        padding: 4px;
        border-radius: $circular_radius;
      }

      &:not(:hover):not(:active) { color: on($primary, secondary); }

      &:hover, &:active { color: on($primary); }
    }
  }

  progress {
    margin: 2px (2px - 8px);
    border-style: none none solid;
    border-width: 2px;
    border-color: $primary;
    background-color: transparent;
  }

  .linked:not(.vertical) > &,  // linked entries
  .linked.vertical > &,  // Vertically linked entries
  .linked:not(.vertical) > &.flat,
  .linked.vertical > &.flat { border-radius: 0; }
}

treeview.view entry {
  &.flat, & {
    min-height: 0;
    padding: 0;
    border-radius: $button_radius;

    &, &:focus {
      border-image: none;
      box-shadow: none;
      background-color: $base;
    }
  }
}

//
// Buttons
//
// stuff for .needs-attention
@keyframes needs_attention {
  from {
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.001,
                                    to($accent),
                                    to(transparent));
  }

  to {
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.5,
                                    to($accent),
                                    to(transparent));
  }
}

%flat_normal_button {
  @include button(flat-normal);
  box-shadow: inset 0 0 0 9999px $overlay-normal;

  &:hover { @include button(flat-hover); }
  &:active { @include button(flat-active); }
  &:disabled {
    box-shadow: none;
    background-color: $overlay-normal;
    color: $text-secondary-disabled;
  }
  &:checked { @include button(flat-checked); }
  &:checked:disabled { @include button(flat-checked-disabled); }
}

%flat_theme_button {
  @include button(flat-normal);
  box-shadow: inset 0 0 0 9999px $overlay-normal;

  &:hover { @include button(flat-hover); }
  &:active { @include button(flat-active); }
  &:disabled {
    box-shadow: none;
    background-color: $overlay-normal;
    color: $text-secondary-disabled;
  }
  &:checked { @include button(checked); }
  &:checked:disabled { @include button(checked-disabled); }
}

%combo_flat {
  background-image: none;
  background-color: transparent;
  font-weight: normal;
  border-radius: 0;
  @include entry(flat-normal);

  &:hover {
    background-image: none;
    background-color: transparent;
    @include entry(flat-hover);
  }

  &:active, &:checked {
    background-image: none;
    background-color: transparent;
    @include entry(flat-focus);
  }

  &:disabled {
    background-image: none;
    background-color: transparent;
    @include entry(flat-disabled);
  }
}

button {
  min-height: 24px;
  min-width: 16px;
  padding: ($medium_size - 24px) / 2 ($medium_size - 16px) / 2;
  border-radius: $button_radius;
  font-weight: 500;

  // fallback buttons for non-native apps
  // @include button(fallback-normal);
  // &:hover { @include button(fallback-hover); }
  // &:active, &:checked { @include button(fallback-active); }
  // &:disabled { @include button(fallback-disabled); }
  // &:checked:disabled { @include button(fallback-checked-disabled); }

  // raised buttons for native Gtk+ apps
  @at-root %normal_button, & {
    @include button(normal);
    &:hover { @include button(hover); }
    &:active { @include button(active); }
    &:disabled { @include button(disabled); }
    &:checked { @include button(checked); }
    &:checked:disabled { @include button(checked-disabled); }
  }

  @at-root %flat_button, &.flat {
    @at-root %simple_flat_button, & {
      @include button(flat-normal);
      &:hover { @include button(flat-hover); }
      &:active { @include button(flat-active); }
      &:disabled { @include button(flat-disabled); }
    }

    &:checked { @include button(flat-checked); }
    &:checked:disabled { @include button(flat-checked-disabled); }
  }

  &.text-button {
    padding-left: 16px;
    padding-right: 16px;
  }

  &.image-button {
    min-width: 24px;
    padding: ($medium_size - 24px) / 2;
    border-radius: $button_radius;
    -gtk-outline-radius: $button_radius;
  }

  &.text-button.image-button {
    border-radius: $button_radius;
    -gtk-outline-radius: $button_radius;

    label {
      &:first-child {
        margin-left: 16px - ($medium_size - 24px) / 2;
        margin-right: 2px;
      }

      &:last-child {
        margin-left: 2px;
        margin-right: 16px - ($medium_size - 24px) / 2;
      }

      &:only-child {
        margin-left: 16px - ($medium_size - 24px) / 2;
        margin-right: 16px - ($medium_size - 24px) / 2;
      }
    }

    image:not(:only-child) {
      &:first-child { margin-left: (24px - 16px) / 2; }

      &:last-child { margin-right: (24px - 16px) / 2; }
    }
  }

  &.close,
  &.round-button,
  &.circular { // The Bloody Circul Button
    @extend %circular_button;
  }

  .linked > & {
    @extend %linked;
    @extend %flat_theme_button;

    &.flat {
      @extend %flat_normal_button;
    }
  }

  .linked.vertical > & {
    @extend %linked_vertical;
  }

  .linked > &.flat,
  .linked.vertical > &.flat {
    border-radius: $button_radius;

    &.image-button {
      border-radius: $button_radius;
      -gtk-outline-radius: $button_radius;
    }

    &.text-button.image-button {
      border-radius: $button_radius;
      -gtk-outline-radius: $button_radius;
    }
  }

  &.combo,
  .linked > &.combo,
  .linked > entry ~ &:not(.combo) {
    @extend %combo_flat;

    &:only-child,
    &:first-child,
    &:last-child { border-radius: 0; }
  }

  buttonbox.linked > & {
    border-radius: $button_radius;
    -gtk-outline-radius: $button_radius;
  }

  row:selected & {
    &:disabled { color: on($primary, secondary-disabled); }
    &.flat {
      color: on($primary, secondary);

      &:hover, &:active, &:checked {
        background-color: $track;
        color: on($primary);
      }

      &:disabled { color: on($primary, secondary-disabled); }

      &:checked:disabled {
        background-color: rgba(white, 0.12);
        color: on($primary, disabled);
      }
    }
  }

  // big standalone buttons like in Documents pager
  &.osd {
    padding: ($large_size - 24px) / 2 ($large_size - 16px) / 2;

    &.image-button, &.remove-button { padding: ($large_size - 24px) / 2; }

    &:disabled { opacity: 0; }
  }

  //overlay / OSD style
  .osd & {
    @extend %flat_button;

    &.flat { @extend %simple_flat_button; }
  }

  // Suggested and Destructive Action buttons
  @each $b_type, $b_color in (suggested-action, $suggested),
                             (destructive-action, $destructive) {
    &.#{$b_type} {
      background-color: $b_color;
      color: on($primary);
      box-shadow: $shadow_1;
      // @include button(normal, $b_color, on($primary));

      &:hover {
        @include button(hover, $b_color, on($primary));
        background-color: lighten($b_color, 5%);
        color: on($primary);
      }

      &:disabled {
        background-color: rgba($b_color, 0.15);
        color: rgba($b_color, 0.45);
      }

      &:checked { background-color: mix(on($primary), $b_color, 30%); }

      &.flat {
        background-color: transparent;
        color: $b_color;
        @include button(flat-normal, $b_color, on($primary));

        &:hover { @include button(flat-hover, $b_color, on($primary)); }
        &:active, &:checked { @include button(flat-active, $b_color, on($primary)); }
        &:disabled { @include button(flat-disabled, $b_color, on($primary)); }
      }
    }
  }

  .stack-switcher > & {
    // to position the needs attention dot, padding is added to the button
    // child, a label needs just lateral padding while an icon needs vertical
    // padding added too.

    outline-offset: -4px; // needs to be set or it gets overriden by GtkRadioButton outline-offset

    > label {
      padding-left: $space_size;  // label padding
      padding-right: $space_size; //
    }

    > image {
      padding-left: $space_size;   // image padding
      padding-right: $space_size;  //
      padding-top: 3px;    //
      padding-bottom: 3px; //
    }

    &.text-button {
      // compensate text-button paddings
      padding-left: $space_size + 4px;
      padding-right: $space_size + 4px;
    }

    &.image-button {
      // we want image buttons to have a 1:1 aspect ratio, so compensation
      // of the padding added to the GtkImage is needed
      padding-left: ($medium_size - 16px) / 2 - 6px;
      padding-right: ($medium_size - 16px) / 2 - 6px;
    }

    &.needs-attention {
      > label,
      > image { @extend %needs_attention; }

      &:checked {
        > label,
        > image {
          animation: none;
          background-image: none;
        }
      }
    }
  }

  // hide separators
  separator {
    min-width: 0;
    min-height: 0;
    background: none;
  }

  // make the row image-button be circular
  row &.image-button {
    border-radius: $circular_radius;
    -gtk-outline-radius: $circular_radius;
  }

  // inline-toolbar buttons
  .inline-toolbar & {
    &:not(.text-button) { @extend %simple_flat_button; }
  }

  .primary-toolbar & {
    -gtk-icon-shadow: none; // tango icons don't need shadows
  }
}

%needs_attention {
  animation: needs_attention $shorter_duration $deceleration_curve forwards;
  background-repeat: no-repeat;
  background-position: right 3px;
  background-size: 6px 6px;

  &:dir(rtl) { background-position: left 3px; }
}

%linked_middle {
  border-radius: 0;
  -gtk-outline-radius: $button_radius;
}

%linked {
  @extend %linked_middle;

  &:first-child {
    border-top-left-radius: $button_radius;
    border-bottom-left-radius: $button_radius;
  }

  &:last-child {
    border-top-right-radius: $button_radius;
    border-bottom-right-radius: $button_radius;
  }

  &:only-child {
    border-radius: $button_radius;
  }
}

%linked_vertical_middle {
  border-radius: 0;
  -gtk-outline-radius: $button_radius
}

%linked_vertical{
  @extend %linked_vertical_middle;

  &:first-child {
    border-top-left-radius: $button_radius;
    border-top-right-radius: $button_radius;
  }

  &:last-child {
    border-bottom-left-radius: $button_radius;
    border-bottom-right-radius: $button_radius;
  }

  &:only-child {
    border-radius: $button_radius;
  }
}

/* menu buttons */
modelbutton.flat,
.menuitem.button.flat {
  min-height: $item_size;
  padding: 0 12px;
  border-radius: $button_radius;
  color: inherit;

  @extend %simple_flat_button;

  &:selected { @extend %selected_items; }

  check,
  radio {
    &:not(:checked):not(:indeterminate) { color: gtkalpha(currentColor, 0.45); }

    &, &:hover { background-image: none; }

    &:active { animation: none; }

    &:last-child { margin-left: -8px; margin-right: -16px; }

    &:first-child { margin-left: -16px; margin-right: -8px; }
  }
}

modelbutton.flat arrow {
  background: none;

  &:hover { background: none; }

  &.left { -gtk-icon-source: -gtk-icontheme("pan-start-symbolic"); }

  &.right { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); }
}

button.color {
  min-height: $small_size;
  min-width: $small_size;
  padding: $space_size;
}

//
// Links
//
*:link, %links {
  &, &:hover, &:active { color: $link; }

  &:visited {
    &, &:hover, &:active { color: $link-visited; }
  }

  &:selected,
  *:selected & { color: on($primary); }
}

button:link,
button:visited {
  @extend %links;

  > label { text-decoration-line: underline; }
}

//
// GtkSpinButton
//
spinbutton {
  &:not(.vertical) {
    padding: 0;
    // in this horizontal configuration, the whole spinbutton
    // behaves as the entry, so we extend the entry styling
    // and nuke the style on the internal entry
    // @extend %entry_fallback;
    @extend %flat_entry;
    transition: $longer_transition, border-image $longer_duration $standard_curve;

    %spinbutton_entry,
    > entry {
      &, &:focus, &:disabled {
        min-width: $large_size - 8px * 2;
        // reset all the other props since the spinbutton node is styled here
        margin: 0;
        border: none;
        border-radius: 0;
        box-shadow: none;
        background: none;
        transition: none;
      }
    }

    > button {
      // margin: $space_size;
      @extend %simple_flat_button;

      &, &:hover, &:active, &:checked, &:disabled {
        @extend %small_button;
        border: solid 6px transparent;
      }

      &.up:dir(ltr),
      &.down:dir(rtl) { margin-left: -3px; }

      &.up:dir(rtl),
      &.down:dir(ltr) { margin-right: -3px; }
    }

    .linked > & > button.up,
    .linked > & > button.down { // Reset
      @extend %flat_button;

      &, &:hover, &:active, &:checked, &:disabled {
        @extend %small_button;
        border: solid 6px transparent;
      }
    }
  }

  // OSD horizontal
  // .osd &:not(.vertical) {
  //   button { }
  // }

  // Vertical
  &.vertical {
    // in the vertical configuration, we treat the spinbutton
    // as a box, and tweak the style of the entry in the middle
    // so that it's linked

    // FIXME: this should not be set at all, but otherwise it gets the wrong
    // color
    &:disabled { color: $text-disabled; }

    &:drop(active) {
      box-shadow: none;
    }

    entry {
      min-height: $medium_size;
      min-width: $large_size;
      padding: 0;
    }

    button {
      min-height: $medium_size;
      min-width: $large_size;
      padding: 0;

      @extend %simple_flat_button;

      &.up { border-radius: 2px 2px 0 0; }
      &.down { border-radius: 0 0 2px 2px; }
    }
  }

  // OSD vertical
  // .osd &.vertical button:first-child { }

  // Misc
  treeview &:not(.vertical) {
    min-height: 0;
    border-style: none;
    border-radius: 0;

    entry {
      min-height: 0;
      padding: 1px 2px;
    }
  }
}

//
// ComboBoxes
//
combobox {
  border: unset;
  border-image: unset;
  border-radius: unset;
  background-color: unset;
  color: unset;
  box-shadow: unset;

  arrow {
    -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    min-height: 16px;
    min-width: 16px;
  }

  // fallback combo-entries for non-native apps
  entry.combo {
    border-radius: 2px;
    margin-right: -32px;
    padding-right: 32px;

    // @include entry(fallback-normal);
    // &:focus { @include entry(fallback-focus); }
    // &:disabled { @include entry(fallback-disabled); }

    // standard combo-entries for native Gtk+ apps
    @include entry(flat-normal);
    &:focus { @include entry(flat-focus); }
    &:disabled { @include entry(flat-disabled); }
  }

  > .linked:not(.vertical) > button:not(:only-child).combo {
    border: none;
    border-image: none;
    box-shadow: none;
    min-height: 16px;
    min-width: 16px;
    margin: 4px;
    padding: $space_size;
    @extend %flat_button;
    @extend %circular_button;
  }

  decoration { transition: none; } // workaround for menuitem selection

  button.combo cellview {
    &:dir(ltr) { margin-left: 8px - ($medium_size - 16px) / 2; }
    &:dir(rtl) { margin-right: 8px - ($medium_size - 16px) / 2; }
  }

  #gtk-combobox-popup-menu {
    padding: 2px 0;

    menuitem {
      min-height: $medium_size - 2px * 2;
      padding: 0 8px;
    }
  }

  &.linked {
    > button:nth-child(2) {
      &:dir(ltr) {
        border-top-right-radius: $button_radius;
        border-bottom-right-radius: $button_radius;
      }

      &:dir(rtl) {
        border-top-left-radius: $button_radius;
        border-bottom-left-radius: $button_radius;
      }
    }
  }

  &:drop(active) { // FIXME: untested
    box-shadow: none;
  }
}

// workaround for LibreOffice with fallback-mode liked-buttons
@each $order, $edge in (first-child, right),
                       (last-child, left) {
  .linked:not(combobox) > button.combo:#{$order} {
    border-#{$edge}-width: 0;
    &:only-child { border-width: 1px; }
  }
}

//
// Toolbars
//
toolbar {
  -GtkWidget-window-dragging: true;
  padding: $space_size / 2;
  background-color: $background;

  button:not(.destructive-action):not(.suggested-action) { @extend %flat_button; }

  .linked:not(.stack-switcher):not(.path-bar) > button:not(.destructive-action):not(.suggested-action) {
    @extend %flat_normal_button;
  }

  frame &.toolbar {
    border-top: 1px solid $border;
    background-color: $base_alt;
  }

  // on OSD
  .osd & { background-color: transparent; }

  // stand-alone OSD toolbars
  @at-root %toolbar_osd, &.osd {
    padding: $space_size;
    border-radius: $window_radius;
    box-shadow: $shadow_2, inset 0 1px highlight($base);
    background-color: $base;

    &:backdrop { box-shadow: $shadow_1, inset 0 1px highlight($base); }

    &.left,
    &.right,
    &.top,
    &.bottom { border-radius: 0; } // positional classes for `attached` osd toolbars
  }

  // toolbar separators
  &.horizontal separator { margin: $space_size / 2; }
  &.vertical separator { margin: $space_size / 2; }

  &:not(.inline-toolbar):not(.osd) {
    scale,
    entry,
    spinbutton,
    button { margin: $space_size / 2; }

    .linked entry,
    .linked spinbutton,
    .linked button {
      &:not(:first-child) { margin-left: 0; }
      &:not(:last-child) { margin-right: 0; }
    }

    switch { margin: ($space_size / 2 + $space_size) ($space_size / 2); }
  }
}

.primary-toolbar,
.location-bar {
  padding: $space_size;
  border-style: solid;
  border-width: 0 0 1px;
  border-color: $border;

  button:not(.destructive-action):not(.suggested-action):not(.combo):not(.flat) { @extend %flat_theme_button; }

  stackswitcher.linked > button:not(.destructive-action):not(.suggested-action):not(.combo):not(.flat) { // reset
    @extend %stackswitcher_button;
  }
}

.inline-toolbar {
  padding: $space_size;
  border-style: solid;
  border-width: 0 1px 1px;
  border-color: $border;
  background-color: $base_alt;
}

searchbar > revealer > box {
  margin: -6px;
  padding: $space_size;
  border-style: solid;
  border-width: 0 0 1px;
  border-color: $border;
  background-color: $background;
  background-clip: border-box;
}

//
// Header bars
//

%headerbar_entry {
  background-color: rgba(on($header), 0.06);
  color: on($header);
  caret-color: on($header);
  border-image: none;
  box-shadow: none;

  &:focus {
    background-color: rgba(on($header), 0.09);
    border-image: none;
    box-shadow: none;
  }

  &:disabled {
    background-color: rgba(on($header), 0.03);
    color: on($header, disabled);
    border-image: none;
    box-shadow: none;
  }
}

%header_button {
  @include button(header-normal);
  &:hover { @include button(header-hover); }
  &:active { @include button(header-active); }
  &:disabled { @include button(header-disabled); }
  &:checked { @include button(header-checked); }
  // &:checked:hover { @include button(header-checked-hover); }
  &:checked:disabled, &:checked:backdrop { @include button(header-checked-disabled); }
  &:backdrop {
    color: on($header, disabled);
    &:disabled { color: on($header, secondary-disabled); }
  }
}

%headerbar_flat_button {
  border-radius: 0;
  color: on($header, secondary);
  background-color: transparent;
  transition: background-color 0,
              background-image 0,
              color $longer_duration $standard_curve,
              box-shadow $longer_duration $standard_curve,
              border-image $longer_duration $standard_curve;
  box-shadow: inset 0 -2px transparent;
  border-image: radial-gradient(circle closest-corner at center calc(100% - 1px),
                                indicator(header) 0%,
                                transparent 0%)
                                0 0 0 / 0 0 0;

  &:hover {
    border-radius: 0;
    color: indicator(header);
    box-shadow: inset 0 -2px gtkalpha(indicator(header), 0.5);
    &, &:disabled { background-color: transparent; }
  }

  &:checked, &:active {
    border-image: radial-gradient(circle closest-corner at center calc(100% - 1px),
                                  indicator(header) 100%,
                                  transparent 0%)
                                  0 0 2 / 0 0 2px;
    background: none;
    color: indicator(header);
    border-radius: 0;

    &:disabled {
      color: rgba(indicator(header), 0.35);
      background-color: transparent;
      border-image: radial-gradient(circle closest-corner at center calc(100% - 1px),
                                    rgba(indicator(header), 0.35) 100%,
                                    transparent 0%)
                                    0 0 2 / 0 0 2px;
    }
  }

  &:checked:hover { background: none; }

  &:disabled {
    color: on($header, secondary-disabled);
    background-color: transparent;
  }
}

headerbar {
  transition: background-color $shorter_duration $deceleration_curve,
              color $shorter_duration $deceleration_curve;
  min-height: $medium-size + $space_size * 2;
  padding: 0 $space_size;
  box-shadow: $header_shadow;
  background-color: $header;
  color: on($header);

  &:backdrop {
    color: on($header, disabled);
    &:disabled { color: on($header, secondary-disabled); }
  }

  &:disabled { color: on($header, disabled); }

  .title {
    padding: 0 $space_size * 2;
    font-weight: bold;
  }

  .subtitle {
    padding: 0 $space_size * 2;
    font-size: smaller;
    color: on($header, secondary);
  }

  .dim-label { color: on($header, secondary); }

  .titlebar > & {
    border-radius: $window_radius $window_radius 0 0;
    box-shadow: inset 0 1px highlight($header), inset 0 -1px $border;
  }

  entry,
  spinbutton,
  separator,
  button {
    margin-top: $space_size;
    margin-bottom: $space_size;
  }

  // reset button margins of the spinbutton
  spinbutton button {
    margin-top: 0;
    margin-bottom: 0;
  }

  separator { @extend %header_separator; }

  &:not(.horizontal) entry {
    @extend %headerbar_entry;
  }

  button:not(.suggested-action):not(.destructive-action),
  .linked:not(.stack-switcher):not(.path-bar) > button:not(.suggested-action):not(.destructive-action):not(.combo) {
    @extend %header_button;
  }

  button.suggested-action, button.destructive-action {
    &:disabled {
      color: gtkalpha(currentColor, 0.3);
      > label { color: inherit; }
    }
  }

  // Reset buttons and entris
  .linked:not(.vertical):not(.path-bar):not(.stack-switcher) > button,
  .linked:not(.vertical) > entry {
    &, &:hover, &:active, &:checked, &:disabled {
      border-radius: $button_radius;
    }
  }

  .linked entry ~ button:not(.combo) {
    &, &:hover, &:active, &:checked, &:disabled {
      border-radius: $button_radius;
      border-image: none;
    }
  }

  button:not(.suggested-action):not(.destructive-action) { @extend %header_button; }

  stackswitcher.linked {
    background-color: if($topbar == 'light', $surface, on($header, divider));
    margin-top: $space_size;
    margin-bottom: $space_size;

    > button:not(.destructive-action):not(.suggested-action):not(.combo) {
      margin-top: 0;
      margin-bottom: 0;
      border-radius: 0;
      color: on($header, secondary);

      &:hover, &:active, &:checked {
        color: on($header);
        background: none;
      }

      &:disabled, &:backdrop {
        color: on($header, secondary-disabled);
        background: none;
      }

      &:checked:disabled, &:checked:backdrop {
        background: none;
      }
    }
  }

  &.windowhandle {
    viewswitcher button:not(.titlebutton):not(.suggested-action):not(.destructive-action) {
      margin-top: 0;
      margin-bottom: 0;
      padding: 0;
      min-width: 120px;
      @extend %headerbar_flat_button;

      image { padding-left: 10px; }
      label { padding-right: 10px; }
    }
  }

  switch {
    margin-top: ($large_size - 22px) / 2;
    margin-bottom: ($large_size - 22px) / 2;

    @if $theme == 'black' and $topbar == 'dark' {
      background-color: rgba(on($header), 0.3);

      &:disabled { color: rgba(on($header), 0.3); }

      &:checked {
        background-color: rgba(on($header), 0.5);

        &:disabled { background-color: rgba(on($header), 0.5 * 0.3); }
      }

      &:checked slider { background-color: on($header); }
    }
  }

  // FIXME: This is a hacky workaround.
  .entry-tag {
    margin-top: $space_size - 1px;
    margin-bottom: $space_size - 1px;
  }

  &.titlebar {
    box-shadow: $header_shadow, inset 0 1px highlight($header);

    &.solid-csd headerbar {
      box-shadow: $header_shadow;
    }

    .tiled &,
    .maximized &,
    .fullscreen & { box-shadow: $header_shadow; }
  }

  .titlebar > & {
    box-shadow: $header_shadow, inset 0 1px highlight($header);
  }

  &.selection-mode {
    transition: background-color 0.00001s $shorter_duration, color $shorter_duration $deceleration_curve;
    animation: header_ripple_effect $shorter_duration $deceleration_curve;
    box-shadow: $shadow_1, inset 0 1px highlight($primary);
    background-color: $primary;
    color: on($primary);

    &:backdrop {
      color: on($primary, secondary);
    }

    .subtitle:link { color: on($primary); }

    button:not(.suggested-action):not(.destructive-action) {
      border-image: radial-gradient(circle closest-corner at center calc(100% - 1px),
                                    currentColor 0%,
                                    transparent 0%)
                                    0 0 0 / 0 0 0;
      color: currentColor;

      &:disabled {
        color: gtkalpha(currentColor, 0.3);

        > label { color: inherit; }
      }

      &:hover {
        border-image: radial-gradient(circle closest-corner at center calc(100% - 1px),
                                    on(dark, secondary) 100%,
                                    transparent 0%)
                                    0 0 2 / 0 0 2px;
        color: on(dark, secondary);

        &, &:disabled { background: none; }
      }

      &:checked {
        border-image: radial-gradient(circle closest-corner at center calc(100% - 1px),
                                      currentColor 100%,
                                      transparent 0%)
                                      0 0 2 / 0 0 2px;
        color: currentColor;

        &:hover { background-color: transparent; color: currentColor; }

        &:disabled {
          color: gtkalpha(currentColor, 0.3);

          > label { color: inherit; }
        }
      }
    }

    .selection-menu {
      padding-left: 16px;
      padding-right: 16px;

      GtkArrow { -GtkArrow-arrow-scaling: 1; }

      .arrow { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
    }
  }

  &.default-decoration {
    min-height: $small_size;
    padding: 2px $space_size;

    .tiled &,
    .maximized &,
    .fullscreen & { box-shadow: none; }

    button.titlebutton {
      min-height: 26px;
      min-width: 26px;
      margin: 0;
      padding: 0;
      transition: $shorter_duration;

      @if $titlebutton == 'default' {
        background-size: 16px 16px;

        &:hover, &:active {
          background-size: 22px 22px;
        }
      }
    }
  }

  &.default-decoration,
  .csd &.default-decoration,
  &.default-decoration:backdrop,
  .csd &.default-decoration:backdrop {  // needed under wayland, since all gtk3 windows are csd windows
    box-shadow: inset 0 1px highlight($header);
  }

  // special case for headerbar path-bars
  .linked:not(.vertical).path-bar {
    > button {
      margin: 0;
      border-radius: 0;

      &:hover {
        color: rgba($indicator, 0.85);
        box-shadow: inset 0 -3px rgba($indicator, 0.5);
        &, &:disabled { background: none; }
      }

      &:checked {
        border-image: radial-gradient(circle closest-corner at center calc(100% - 1px),
                                      $indicator 100%,
                                      transparent 0%)
                                      0 0 3 / 0 0 3px;
        background: none;
        color: $indicator;
        border-radius: 0;

        &:hover { background: none; }
      }
    }
  }
}

%header_separator {
  min-width: 0;
  min-height: 0;
  background-color: $header;
  border: none;
}

.titlebar {
  &, &.background {
    border-top-left-radius: $window_radius;
    border-top-right-radius: $window_radius;
  }

  // separator:first-child + &, // tackles the paned container case
  // headerbar:first-child:not(:only-child) { border-top-right-radius: 0; }
  // headerbar:last-child:not(:only-child) { border-top-left-radius: 0; }

  separator, separator.sidebar { box-shadow: inset 0 1px highlight($header), inset 0 -1px $border; }

  stack & { // tackles the stacked headerbars case
    &:first-child, &:last-child {
      border-top-left-radius: $window_radius;
      border-top-right-radius: $window_radius;
      border: none;
    }
  }

  .solid-csd & {
    &:dir(rtl), &:dir(ltr) { // specificity bump
      margin: 0;
      border-radius: 0;
      box-shadow: $header_shadow;
    }
  }

  .background.tiled &,
  .background.tiled-top &,
  .background.tiled-right &,
  .background.tiled-bottom &,
  .background.tiled-left &,
  .background.maximized &,
  .background.solid-csd & {
    &,
    &:first-child,
    &:last-child,
    &:only-child {
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }
  }


  &.solid-csd headerbar {
    box-shadow: $header_shadow;
  }

  .solid-csd > &.vertical {
    box-shadow: none;

    headerbar.titlebar {
      box-shadow: none;
    }

    searchbar {
      background: none;
    }
  }
}

.titlebar:not(headerbar) {
  box-shadow: $header_shadow, inset 0 1px highlight($header);
  border: none;

  .tiled &,
  .maximized &,
  .fullscreen & { box-shadow: $header_shadow; }

  > separator { // separator between titlebars
    min-width: 1px;
    min-height: 1px;
    background-color: $header;
    background-image: image($header);
    border: none;
  }

  window.csd > & {
    padding: 0;
    background: none;
    border: none;
    box-shadow: none;
  }
}

window.background > box.vertical:not(.titlebar) > headerbar:not(.titlebar) { // reset headerbar style for not CSD window
  border-radius: 0;
  box-shadow: none;

  &, &:backdrop { background-color: $header; }

  // Fixes split headerbars
  separator:first-child + &,
  &:first-child {
    &, &:backdrop {
      border-top-left-radius: 0;
    }
  }

  &:last-child {
    &, &:backdrop {
      border-top-right-radius: 0;
    }
  }
}

//
// Pathbars
//

%pathbar_button,
.path-bar > button:not(.combo) {
  padding-left: ($medium_size - 24px) / 2;
  padding-right: ($medium_size - 24px) / 2;
  background-image: none;
  box-shadow: none;
  @extend %linked;

  &, &:hover, &:active, &:checked, &:disabled {
    background-color: $fill;
  }

  &:not(:first-child):not(:last-child) {
    transition: $shorter_transition,
                background-size 0,
                background-image 0,
                background-color 0,
                box-shadow 0,
                border-image $ripple_duration $deceleration_curve;
    border-image: radial-gradient(circle closest-corner at center calc(100% - 1px),
                                  transparent 0%,
                                  transparent 0%)
                                  0 0 2 / 0 0 0;

    &:hover {
      box-shadow: inset 0 -2px $track;
      color: $text;
    }

    &:active {
      color: $text;
      box-shadow: none;
      background-image: none;
      animation: none;
      border-image: radial-gradient(circle closest-corner at center calc(100% - 1px),
                                    $primary 100%,
                                    $track 0%)
                                    0 0 2 / 0 0 2px;
    }

    &:checked {
      box-shadow: inset 0 -2px $primary;
      color: $text;
    }
  }

  label, image {
    margin: 0 $space_size / 2;
  }

  &.slider-button {
    padding-left: ($small_size - 16px) / 2;
    padding-right: ($small_size - 16px) / 2;
  }
}

//
// Tree Views
//
treeview.view {
  @at-root * {
    -GtkTreeView-horizontal-separator: 4;
    -GtkTreeView-grid-line-width: 1;
    -GtkTreeView-grid-line-pattern: '';
    -GtkTreeView-tree-line-width: 1;
    -GtkTreeView-tree-line-pattern: '';
    -GtkTreeView-expander-size: 16;
  }

  border-left-color: $track;  // this is actually the tree lines color,
  border-top-color: $border; // while this is the grid lines color, better then nothing

  rubberband { @extend rubberband; } // to avoid borders being overridden by the previously set props

  &:hover, &:active, &:selected { border-radius: 0; }

  &.separator {
    min-height: 1px + 2px * 2;
    color: $border;
  }

  &:drop(active) {
    border-style: solid none;
    border-width: 1px;
    border-color: $accent;

    &.after { border-top-style: none; }
    &.before { border-bottom-style: none; }
  }

  &.expander {
    -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    -gtk-icon-transform: rotate(-90deg);

    &:dir(rtl) { -gtk-icon-transform: rotate(90deg); }
    &:checked { -gtk-icon-transform: unset; }

    color: $text-secondary;

    &:hover, &:active { color: $text; }
    &:disabled { color: $text-secondary-disabled; }

    &:selected {
      color: on($primary, secondary);

      &:hover, &:active { color: on($primary); }
      &:disabled { color: on($primary, secondary-disabled); }
    }
  }

  &.progressbar { // progress bar in treeviews
    border-style: none none solid;
    border-width: $bar_size;
    border-color: $primary;
    box-shadow: none;
    background-color: transparent;
    border-radius: 0;

    &:selected { border-color: currentColor; }
  }

  &.trough { // progress bar trough in treeviews
    border-style: none none solid;
    border-width: $bar_size;
    border-color: gtkalpha($primary, 0.3);
    box-shadow: none;
    background-color: transparent;
    border-radius: 0;

    &:selected { border-color: $track; }
  }

  header {
    button {
      @extend %row_activatable;

      padding: 2px $space_size;
      border-style: none solid solid none;
      border-width: 1px;
      border-color: $border;
      border-radius: 0;
      background-clip: border-box;

      &, &:hover, &:active { box-shadow: none; }

      &, &:disabled { background-color: $base; }

      &:last-child { border-right-style: none; }
    }
  }

  button.dnd,
  header.button.dnd { // for treeview-like derive widgets
    padding: 2px $space_size;
    border-style: none solid solid;
    border-width: 1px;
    border-color: $border;
    border-radius: 0;
    box-shadow: none;
    background-color: $base;
    background-clip: border-box;
    color: $primary;
  }

  acceleditor > label { background-color: $primary; } // see tests/testaccel to test
}

//
// Menus
//
menubar,
.menubar {
  -GtkWidget-window-dragging: true;
  padding: 0;
  color: on($header, secondary);
  background-color: $header;

  &:backdrop {
    color: on($header, secondary-disabled);
  }

  > menuitem {
    min-height: 20px;
    padding: 4px 8px;
    color: on($header, secondary);

    &:hover { //Seems like it :hover even with keyboard focus
      transition: background-color $shorter_duration $deceleration_curve;
      background-color: $primary;
      color: on(dark);
    }

    &:disabled { color: on($header, disabled); }

    > window.background.csd.popup > decoration,
    > window.background.csd.popup > menu {
      border-radius: 0 0 $button_radius $button_radius;
    }

    > window.popup.background > menu {
      menuitem { transition: none; }
    }
  }
}

.popup.background {
  background-color: transparent; // without this menus transparency doesn't work
}

menu,
.menu,
.context-menu {
  margin: 4px;
  padding: 5px 0;
  box-shadow: inset 0 1px highlight($menu);
  background-color: $menu;
  border: 1px solid $border;
  border-radius: $menu_radius;

  .csd & {
    border: none; // axes borders in a composited env
  }

  menuitem {
    transition: background-color $shorter_duration $deceleration_curve;
    min-height: 20px;
    min-width: 40px;
    padding: 4px 8px;
    font: initial;
    text-shadow: none;
    color: on($menu, secondary);

    &:hover {
      transition: none;
      color: on(dark);
      background-color: $primary;
    }

   &:disabled, label:disabled { color: on($menu, secondary-disabled); }
   label { &:dir(rtl), &:dir(ltr) { color: inherit; }}

    // submenu indicators
    arrow {
      min-height: 16px;
      min-width: 16px;

      &:dir(ltr) {
        -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
        margin-left: 8px;
      }

      &:dir(rtl) {
        -gtk-icon-source:-gtk-icontheme('pan-end-symbolic-rtl');
        margin-right: 8px;
      }
    }
  }

  // overflow arrows
  > arrow {
    min-height: 16px;
    min-width: 16px;
    padding: 4px;
    background-color: $menu;
    color: on($menu, secondary);

    &.top {
      margin-top: -$menu_radius;
      border-bottom: 1px solid $border;
      border-radius: $menu_radius $menu_radius 0 0;
      -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
    }

    &.bottom {
      margin-top: $menu_radius * 2;
      margin-bottom: -$menu_radius * 3;
      border-top: 1px solid $border;
      border-radius: 0 0 $menu_radius $menu_radius;
      -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    }

    &:hover {
      background-image: image(gtkalpha(currentColor, 0.3 / 2));
      color: on($menu);
    }

    &:disabled {
      border-color: transparent;
      background-color: transparent;
      color: transparent;
    }
  }

  separator,
  .csd & separator {
    margin: $space_size / 2 0;
    border-bottom: 1px solid $border;
    color: transparent;
    background-color: transparent;
  }
}

menuitem {
  accelerator { color: gtkalpha(currentColor, 0.45); }
}

.csd.popup { border-radius: $menu_radius; }

//
// Popovers
//

popover.background {
  transition: $shadow_transition;
  padding: 0;
  box-shadow: $shadow_2;
  background-color: $menu;

  &:backdrop { box-shadow: $shadow_1; }

  &, .csd & {
    border-style: solid;
    border-width: 1px;
    border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.2) rgba(0, 0, 0, 0.3);
    border-radius: $menu_radius;
  }

  > list,
  > .view,
  > toolbar {
    border-style: none;
    box-shadow: none;
    background-color: transparent;
  }

  entry { @extend %flat_entry; }

  entry ~ button:not(.up):not(.down) { @extend %combo_flat; }

  .linked button:not(.combo) { border-radius: $button_radius; margin: 0 2px; }

  button:not(.suggested-action):not(.destructive-action):not(.combo):not(.flat):not(.up):not(.down) {
    @extend %flat_theme_button;
  }

  &.menu button,
  button.model {
    margin: 0;
    min-height: $medium_size - 4px;
    min-width: 32px;
    padding: 0 $space_size;
    box-shadow: none;
  }

  stackswitcher {
    background-color: $fill;
  }

  separator { margin: 4px 0; }
  list separator { margin: 0; }
}

//
// Notebooks
//

%tabs_tab {
  transition: $shorter_transition,
              background-size 0,
              background-image 0;
  min-height: $small_size;
  min-width: $small_size;
  padding: $space_size;
  outline-offset: -5px;
  border: none; // for reorderable tabs
  background-image: radial-gradient(circle farthest-corner at center,
                                    $track-disabled 10%,
                                    transparent 0%);
  background-repeat: no-repeat;
  background-position: center;
  background-size: 0% 0%;
  color: $text-secondary;
  font-weight: 500;

  &:hover {
    color: $text;
  }

  &:disabled { color: $text-secondary-disabled; }

  &:checked {
    transition: $shorter_transition,
                background-size $shorter_duration $deceleration_curve,
                background-image $shorter_duration + $ripple_duration $deceleration_curve;
    background-image: radial-gradient(circle farthest-corner at center,
                                      transparent 10%,
                                      transparent 0%);
    background-size: 1000% 1000%;
    color: $text;

    &:disabled { color: $text-disabled; }
  }
}

notebook {
  > header {
    border-width: 1px;
    border-color: $border;
    background-color: $background;
    background-clip: border-box;

    &.top {
      border-bottom-style: solid;
      > tabs {
        margin-bottom: -1px;
        > tab {
          &:hover { box-shadow: inset 0 -2px gtkalpha($indicator, 0.3); }
          &:checked { box-shadow: inset 0 -2px $indicator; }
        }
      }
    }

    &.bottom {
      border-top-style: solid;
      > tabs {
        margin-top: -1px;
        > tab {
          &:hover { box-shadow: inset 0 2px gtkalpha($indicator, 0.3); }
          &:checked { box-shadow: inset 0 2px $indicator; }
        }
      }
    }

    &.left {
      border-right-style: solid;
      > tabs {
        margin-right: -1px;
        > tab {
          &:hover { box-shadow: inset -2px 0 gtkalpha($indicator, 0.3); }
          &:checked { box-shadow: inset -2px 0 $indicator; }
        }
      }
    }

    &.right {
      border-left-style: solid;
      > tabs {
        margin-left: -1px;
        > tab {
          &:hover { box-shadow: inset 2px 0 gtkalpha($indicator, 0.3); }
          &:checked { box-shadow: inset 2px 0 $indicator; }
        }
      }
    }

    &.top > tabs > arrow {
      @extend %notebook_vert_arrows;
      border-top-style: none;
    }

    &.bottom > tabs > arrow {
      @extend %notebook_vert_arrows;
      border-bottom-style: none;
    }

    @at-root %notebook_vert_arrows {
      padding-left: 4px;
      padding-right: 4px;

      &.down {
        margin-left: -$space_size - 2px;
        -gtk-icon-source: -gtk-icontheme('pan-start-symbolic');
      }

      &.up {
        margin-right: -$space_size - 2px;
        -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
      }
    }

    &.left > tabs > arrow {
      @extend %notebook_horz_arrows;
      border-left-style: none;
    }

    &.right > tabs > arrow {
      @extend %notebook_horz_arrows;
      border-right-style: none;
    }

    @at-root %notebook_horz_arrows {
      padding-top: 4px;
      padding-bottom: 4px;

      &.down {
        margin-top: -$space_size - 2px;
        -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
      }

      &.up {
        margin-bottom: -$space_size - 2px;
        -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
      }
    }

    > tabs > arrow {
      @extend %simple_flat_button;
      min-height: 16px;
      min-width: 16px;
      border-radius: 0;
    }

    > tabs > tab {
      @extend %tabs_tab;

      > image,
      > box > image {
        margin-left: $space_size;
        margin-right: 0;
      }

      > label,
      > box > label {
        margin-left: $space_size;
        margin-right: $space_size;
      }

      // &.reorderable-page { }

      // close button
      // colors the button like the label, overridden otherwise
      button, button.flat {
        min-height: 24px;
        min-width: 24px;
        padding: 0;
        border-radius: $circular_radius;
        -gtk-outline-radius: $circular_radius;
      }

      button { @extend %flat_button; }
    }

    &.top,
    &.bottom {
      > tabs {
        padding-left: $space_size + 2px;
        padding-right: $space_size + 2px;

        &:not(:only-child) {
          &:first-child { margin-left: 0; }
          &:last-child { margin-right: 0; }
        }
      }
    }

    &.left,
    &.right {
      > tabs {
        padding-top: $space_size + 2px;
        padding-bottom: $space_size + 2px;

        &:not(:only-child) {
          &:first-child { margin-top: 0; }
          &:last-child { margin-bottom: 0; }
        }
      }
    }

    > button, > button.flat {
      min-height: 24px;
      min-width: 24px;
      padding: 0;
      margin: $space_size;
    }

    > button { @extend %flat_button; }
  }

  > stack:not(:only-child) { // the :not(:only-child) is for "hidden" notebooks
    background-color: $base;

    entry,
    spinbutton:not(.vertical) { @extend %flat_entry; }

    entry ~ button:not(.up):not(.down) { @extend %combo_flat; }
  }
}

//
// Scrollbars
//
scrollbar {
  $_slider_min_length: 24px;

  // disable steppers
  @at-root * {
    -GtkScrollbar-has-backward-stepper: false;
    -GtkScrollbar-has-forward-stepper: false;
  }

  transition: $shorter_transition;
  background-color: $base;
  background-clip: $extra_background_clip;

  // scrollbar border
  &.top { border-bottom: 1px solid $border; }
  &.bottom { border-top: 1px solid $border; }
  &.left { border-right: 1px solid $border; }
  &.right { border-left: 1px solid $border; }

  // slider
  slider {
    transition: $shorter_transition, margin 0, border-width 0;
    min-width: 5px;
    min-height: 5px;
    border: 3px solid transparent;
    border-radius: 100px;
    background-clip: padding-box;
    background-color: $text-disabled;

    &:hover { background-color: $text-disabled; }
    &:active { background-color: $text-secondary; }
    &:disabled { background-color: $text-secondary-disabled; }
  }

  &.fine-tune {
    slider {
      transition: $shorter_transition, margin 0, border-width 0, min-width 0, min-height 0;
      min-width: 4px;
      min-height: 4px;
    }

    &.horizontal slider { margin: 2px 0; }
    &.vertical slider { margin: 0 2px; }
  }

  &.overlay-indicator {
    &:not(.dragging):not(.hovering) {
      border-color: transparent;
      background-color: transparent;

      slider {
        min-width: 4px;
        min-height: 4px;
        margin: 3px;
        border: 1px solid gtkalpha($base, 0.3);
      }

      button {
        min-width: 4px;
        min-height: 4px;
        margin: 3px;
        border: 1px solid gtkalpha($base, 0.3);
        border-radius: $circular_radius;
        background-color: $text-disabled;
        background-clip: padding-box;
        -gtk-icon-source: none;

        &:disabled { background-color: $text-secondary-disabled; }
      }

      &.horizontal {
        slider { min-width: $_slider_min_length; }
        button { min-width: 8px; }
      }

      &.vertical {
        slider { min-height: $_slider_min_length; }
        button { min-height: 8px; }
      }
    }

    &.dragging,
    &.hovering { background-color: gtkalpha($base, 0.9); }
  }

  &.horizontal slider { min-width: $_slider_min_length; }

  &.vertical slider { min-height: $_slider_min_length; }

  // button styling
  button {
    @extend %simple_flat_button;

    min-width: 16px;
    min-height: 16px;
    padding: 0;
    border-radius: 0;
  }

  // button icons
  &.vertical {
    button {
      &.down { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
      &.up { -gtk-icon-source: -gtk-icontheme('pan-up-symbolic'); }
    }
  }

  &.horizontal {
    button {
      &.down { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic'); }
      &.up { -gtk-icon-source: -gtk-icontheme('pan-start-symbolic'); }
    }
  }
}

//
// Switch
//
switch {
  transition: all $shorter_duration $deceleration_curve;
  margin: $space_size 0;
  padding: 0 2px;
  border: 5px solid transparent;
  border-radius: $circular_radius;
  background-color: rgba($text, 0.25);
  background-clip: padding-box;
  // color: transparent;
  font-size: 0;

  &:disabled { opacity: 0.5; }

  &:checked { background-color: rgba($accent, 0.5); }

  // hide on/off icons for >=3.24.5
  image {
    margin: -8px;
    -gtk-icon-transform: scale(0);
  }

  slider {
    transition: all $shorter_duration $deceleration_curve;
    min-width: 20px;
    min-height: 20px;
    margin: -3px -2px;
    border-radius: $circular_radius;
    box-shadow: 0 0 0 10px transparent, $shadow_1;
    background-color: $surface;
    color: transparent;
  }

  popover & slider,
  .budgie-popover & slider {
    background-color: if($variant == 'light', $surface, lighten($surface, 5%));
  }

  &:hover slider { color: $text; box-shadow: 0 0 0 10px rgba($text, 0.1), $shadow_1; }
  &:focus slider { color: $accent; box-shadow: $shadow_1; }
  &:focus:hover slider { color: $accent; box-shadow: 0 0 0 10px rgba($accent, 0.1), $shadow_1; }
  &:checked slider { background-color: $accent; color: $accent; }
  &:checked:hover slider { color: $accent; box-shadow: 0 0 0 10px rgba($accent, 0.1), $shadow_1; }

  row:selected & {
    background-color: rgba(on(dark), 0.2);

    &:checked {
      background-color: rgba(on($primary), 0.6);
    }

    slider {
      background-color: lighten($accent, 25%);
    }

    &:checked slider {
      animation: none;
      background-color: on($primary);
    }
  }
}


//
// Check and Radio items
//
// draw regular check and radio items using our PNG assets
// all assets are rendered from assets.svg. never add pngs directly

//selection-mode
.view.content-view.check:not(list),
.content-view .tile check:not(list) {
  min-height: 40px;
  min-width: 40px;
  margin: 0;
  padding: 0;
  box-shadow: none;
  background-color: transparent;
  background-image: none;

  @each $s, $as in ('', '-unchecked'),
                   (':checked', '-checked') {
    &#{$s} {
      -gtk-icon-source: -gtk-scaled(url("assets/selectionmode-checkbox#{$as}#{$asset-suffix}.png"),
                                    url("assets/selectionmode-checkbox#{$as}#{$asset-suffix}@2.png"));
    }
  }
}

checkbutton,
radiobutton {
  outline: none;
}

checkbutton.text-button,
radiobutton.text-button {
  // this is for a nice focus on check and radios text
  padding: 2px;
  outline-offset: 0;

  label:not(:only-child) { margin: 0 4px; }
}

%check_radio_button,
checkbutton > check:not(:checked):not(:indeterminate),
radiobutton > radio:not(:checked):not(:indeterminate) {
  color: $text-secondary;
  &:hover, &:active { color: $text; }
  &:disabled { color: $text-secondary-disabled; }
}

check,
radio {
  min-height: 24px;
  min-width: 24px;
  margin: -8px;
  padding: 8px;
  @extend %simple_flat_button;
  @extend %circular_button;

  &:checked, &:indeterminate {
    color: indicator(accent);

    &:hover { box-shadow: inset 0 0 0 9999px gtkalpha(indicator(accent), 0.15); }

    &:disabled {  color: gtkalpha(indicator(accent), 0.3); }
  }

  &:not(:hover):focus { box-shadow: inset 0 0 0 9999px transparent; }

  popover modelbutton.flat & {
    &, &:focus, &:hover, &:focus:hover, &:active, &:disabled {
      transition: none; // FIXME: this is a workaround for a popover check/radio long transition issue
      box-shadow: none;
      background-image: none;
    }

    &:not(:checked):not(:indeterminate):not(:disabled) { color: $text-secondary; }

    &.left:dir(rtl) {
      margin-left: -16px;
      margin-right: -8px;
    }

    &.right:dir(ltr) {
      margin-left: -8px;
      margin-right: -16px;
    }
  }

  menu menuitem & {
    transition: none;
    margin: 0; // this is a workaround for a menu check/radio size allocation issue
    padding: 0;
    color: $text-secondary;

    &:dir(ltr) { margin-right: 8px; }

    &:dir(rtl) { margin-left: 8px; }

    &:hover, &:checked:hover, &:indeterminate:hover { color: on($primary); }

    &:disabled { color: on($primary, disabled); }

    &:checked, &:indeterminate {
      color: indicator(accent);
      &:disabled {  color: gtkalpha(indicator(accent), 0.3); }
    }
  }

  row &:selected,
  treeview.view &:selected,
  row.activatable &:selected {
    &, &:focus {
      &, &:active, &:checked, &:indeterminate {
        color: on($primary, secondary);
        &:disabled { color: on($primary, secondary-disabled); }
      }

      &:hover {
        color: on($primary);
        &:disabled { color: on($primary, disabled); }
      }
    }
  }
}

%check,
check {
  -gtk-icon-source: -gtk-recolor(url("assets/scalable/checkbox-unchecked-symbolic.svg"));

  &:checked { -gtk-icon-source: -gtk-recolor(url("assets/scalable/checkbox-checked-symbolic.svg")); }

  &:indeterminate { -gtk-icon-source: -gtk-recolor(url("assets/scalable/checkbox-mixed-symbolic.svg")); }
}

%radio,
radio {
  -gtk-icon-source: -gtk-recolor(url("assets/scalable/radio-unchecked-symbolic.svg"));

  // &:checked { -gtk-icon-source: -gtk-recolor(url("assets/scalable/radio-checked-symbolic.svg")); }

  &:indeterminate { -gtk-icon-source: -gtk-recolor(url("assets/scalable/radio-mixed-symbolic.svg")); }

  border-image-slice: 20;
  border-image-width: 20px;
  border-image-source: -gtk-gradient(radial,
                                     center center, 0,
                                     center center, 0.001,
                                     to(indicator(accent)),
                                     to(transparent));

  &:checked:not(:indeterminate) {
    border-image-source: -gtk-gradient(radial,
                                       center center, 0,
                                       center center, 0.125,
                                       to(indicator(accent)),
                                       to(transparent));
  }

  &:checked:not(:indeterminate):disabled {
    border-image-source: -gtk-gradient(radial,
                                       center center, 0,
                                       center center, 0.125,
                                       to(gtkalpha(indicator(accent), 0.3)),
                                       to(transparent));
  }
}

%small_check,
menu menuitem check {
  min-height: 16px;
  min-width: 16px;
  border-radius: 2px;
  -gtk-icon-source: -gtk-recolor(url("assets/scalable/small-checkbox-unchecked-symbolic.svg"));

  &:checked { -gtk-icon-source: -gtk-recolor(url("assets/scalable/small-checkbox-checked-symbolic.svg")); }

  &:indeterminate { -gtk-icon-source: -gtk-recolor(url("assets/scalable/small-checkbox-mixed-symbolic.svg")); }
}

%small_radio,
menu menuitem radio {
  min-height: 16px;
  min-width: 16px;
  border-image: none;
  -gtk-icon-source: -gtk-recolor(url("assets/scalable/small-radio-unchecked-symbolic.svg"));

  &:checked { -gtk-icon-source: -gtk-recolor(url("assets/scalable/small-radio-checked-symbolic.svg")); }

  &:indeterminate { -gtk-icon-source: -gtk-recolor(url("assets/scalable/small-radio-mixed-symbolic.svg")); }
}

treeview.view check,
treeview.view radio {
  padding: 0;
  color: $text-secondary;
  &:hover, &:active { color: $text; }
  &:disabled { color: $text-secondary-disabled; }
  &:checked, &:indeterminate { color: indicator(accent); }
  &:checked:disabled, &:indeterminate:disabled { color: gtkalpha(indicator(accent), 0.3); }

  &:hover {
    box-shadow: none;
    background-image: none;
    background-color: transparent;

    &:disabled { box-shadow: none; }
    &:selected { box-shadow: none; }
  }
}

treeview.view radio:checked {
  -gtk-icon-source: -gtk-recolor(url("assets/scalable/radio-checked-symbolic.svg"));
  border-image: none;
}

//
// GtkScale
//
scale {
  // sizing
  $_marks_lenght: 8px;
  $_marks_distance: 7px;

  $slider_size: 32px;
  $marks_slider_size: 38px;

  $trough_size: 2px;

  $slider_margin: -($slider_size - $trough_size) / 2;
  $marks_slider_margin: -($marks_slider_size - $trough_size) - $slider_margin;

  $color_slider_margin: -($slider_size) / 2;
  $color_marks_slider_margin: -($marks_slider_size - 16px) - $color_slider_margin;

  min-height: $medium_size - $slider_size;
  min-width: $medium_size - $slider_size;
  padding: ($slider_size / 2);

  // the slider is inside the trough, so to have make it bigger there's a negative margin
  slider {
    min-height: $slider_size;
    min-width: $slider_size;
    margin: $slider_margin;
  }

  // the backing bit
  trough {
    transition: background-color $shorter_duration $deceleration_curve;
    outline: none;
    background-color: $track;

    &:disabled { background-color: $track-disabled; }
  }

  // the colored part of the backing bit
  highlight {
    transition: background-color $shorter_duration $deceleration_curve;
    background-color: $accent;

    &:disabled { background-color: transparent; }
  }

  // this is another differently styled part of the backing bit, the most relevant use case is for example
  // in media player to indicate how much video stream as been cached
  fill {
    transition: background-color $shorter_duration $deceleration_curve;
    background-color: $track;

    &:disabled { background-color: transparent; }
  }

  slider {
    transition: background-color $shorter_duration $deceleration_curve,
                background-size $ripple_duration $deceleration_curve,
                background-image $ripple_opacity_duration $deceleration_curve;
    background-repeat: no-repeat;
    background-position: center;
    background-size: auto, 1000% 1000%;
    border-radius: 100%;
    // background-color: transparent;
    color: transparent;

    @each $s, $as in ('', ''),
                     (':disabled', '-disabled') {
      &#{$s} {
        $_url: 'assets/scale-slider#{$as}#{$asset_suffix}';

        background-image: -gtk-scaled(url('#{$_url}.png'), url('#{$_url}@2.png')),
                          radial-gradient(circle farthest-corner at center,
                                          currentColor 10%,
                                          transparent 0%);
      }
    }

    &:hover { background-color: rgba($accent, 0.10); }
    &:focus { background-color: rgba($accent, 0.12); }
    &:focus:hover { background-color: rgba($accent, 0.16); }

    &:active {
      transition: background-color $shorter_duration $deceleration_curve,
                  background-size 0,
                  background-image 0;
      animation: scale_ripple_effect $longer_duration $deceleration_curve forwards;
      background-size: auto, 0% 0%;
      background-color: rgba($accent, 0.12);
      color: rgba($accent, 0.15);
    }
  }

  // click-and-hold the slider to activate
  &.fine-tune {
    // to make the slider shrink in fine-tune mode
    slider { background-size: calc(100% - 12px); }
  }

  marks label,
  value { color: gtkalpha(currentColor, 0.45); }

  marks {
    color: $track;

    @each $marks_class, $marks_pos, $marks_margin in (top, top, bottom),
                                                     (bottom, bottom, top),
                                                     (top, left, right),
                                                     (bottom, right, left) {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_lenght);
      }
    }
  }

  &.horizontal {
    indicator {
      min-height: $_marks_lenght;
      min-width: 1px;
    }
  }

  &.vertical {
    indicator {
      min-height: 1px;
      min-width: $_marks_lenght;
    }
  }

  // *WARNING* scale with marks madness following

  @each $dir_class, $dir_infix in ('horizontal', 'horz'),
                                  ('vertical', 'vert') {
    @each $marks_infix, $marks_class in ('marks-before', 'marks-before:not(.marks-after)'),
                                        ('marks-after', 'marks-after:not(.marks-before)') {
      &.#{$dir_class}.#{$marks_class} {
        slider {
          @each $state, $state_infix in ('', ''),
                                        (':disabled', '-disabled') {
            &#{$state} {
              $_scale_asset: 'assets/scale-#{$dir_infix}-#{$marks_infix}-slider#{$state_infix}#{$asset_suffix}';

              background-image: -gtk-scaled(url('#{$_scale_asset}.png'), url('#{$_scale_asset}@2.png')),
                                radial-gradient(circle farthest-corner at center,
                                                currentColor 10%,
                                                transparent 0%);
            }
          }
        }
      }
    }
  }

  &.color {
    min-height: 0;
    min-width: 0;

    &.horizontal {
      padding: 0 0 12px 0;

      slider {
        &:dir(ltr), &:dir(rtl) { // specificity bump
          margin-bottom: $color_slider_margin;
          margin-top: $color_marks_slider_margin;
        }
      }
    }

    &.vertical {
      &:dir(ltr) {
        padding: 0 0 0 ($space_size * 2);

        slider {
          margin-left: $color_slider_margin;
          margin-right: $color_marks_slider_margin;
        }
      }

      &:dir(rtl) {
        padding: 0 ($space_size * 2) 0 0;

        slider {
          margin-right: $color_slider_margin;
          margin-left: $color_marks_slider_margin;
        }
      }
    }
  }
}

//
// Progress bars
//
progressbar {
  // sizing
  &.horizontal {
    trough,
    progress { min-height: $bar_size; }
  }

  &.vertical {
    trough,
    progress { min-width: $bar_size; }
  }

  // FIXME: insensitive state missing and some other state should be set probably
  color: $text-disabled;
  font-size: smaller;

  trough { background-color: gtkalpha($primary, 0.3); border-radius: 6px; }

  progress { background-color: $primary; border-radius: 6px; }

  &.osd { // progressbar.osd used for epiphany page loading progress
    box-shadow: none;
    padding: 0;
    margin: 0;
    border: none;
  }
}

//
// Level Bar
//
levelbar {
  block {
    min-width: 0px;
    min-height: $bar_size;
  }

  &.vertical block {
    min-width: $bar_size;
    min-height: $medium_size;
  }

  trough {
    padding: 2px;
    border-radius: 6px;
    @include entry(normal);

    &:disabled { @include entry(disabled); }
  }

  &.horizontal.discrete block { margin: 0 1px; }
  &.vertical.discrete block { margin: 1px 0; }
  &.horizontal.discrete trough { padding: 2px 1px; }
  &.vertical.discrete trough { padding: 1px 2px; }

  block {
    &.low {
      background-color: $warning;
    }

    &.high,
    &:not(.empty) {
      background-color: $primary;
    }

    &.full {
      background-color: $success;
    }

    &.empty {
      background-color: $track;
      color: $text-disabled;
    }
  }
}

//
// Print dialog
//
printdialog {
  paper {
    padding: 0;
    border: 1px solid $border;
    background-color: $base;
    color: $text;
  }

  .dialog-action-box { margin: $space_size * 2; }
}

//
// Frames
//
frame > border,
.frame {
  margin: 0;
  padding: 0;
  border: 1px solid $border;
  box-shadow: none;
  border-radius: $button_radius;
}

frame.flat > border,
frame > border.flat,
.frame.flat,
.frame .frame,
frame .frame {
  border: none;
}

frame {
  border-radius: $button_radius;
  border: none;

  > label {
    margin: 4px;
  }

  &:not(.raven-frame) list {
    border-radius: $button_radius;

    > row {
      &:first-child { border-radius: $button_radius $button_radius 0 0; }
      &:last-child { border-radius: 0 0 $button_radius $button_radius; }
    }
  }

  leaflet > stack > & list,
  viewport.frame > list { // reset
    border-radius: 0;

    > row {
      &:first-child { border-radius: 0; }
      &:last-child { border-radius: 0; }
    }
  }
}

actionbar > revealer >  box {
  padding: $space_size;
  border-top: 1px solid $border;

  > button:not(.server-list-button):not(.combo) {
    @extend %flat_normal_button;
  }
}

scrolledwindow {
  > viewport.frame { // avoid double borders when viewport inside scrolled window
    border: none;
  }

  // This is used when content is touch-dragged past boundaries.
  // draws a box on top of the content, the size changes programmatically.
  @at-root overshoot {
    &.top { @include overshoot(top); }

    &.bottom { @include overshoot(bottom); }

    &.left { @include overshoot(left); }

    &.right { @include overshoot(right); }
  }

  // Overflow indication, works similarly to the overshoot, the size if fixed tho.
  @at-root undershoot {
    &.top { @include undershoot(top); }

    &.bottom { @include undershoot(bottom); }

    &.left { @include undershoot(left); }

    &.right { @include undershoot(right); }
  }

  @at-root junction { // the small square between two scrollbars
    border-style: solid none none solid;
    border-width: 1px;
    border-color: $border;
    background-color: $base;

    &:dir(rtl) { border-style: solid solid none none; }
  }
}

//vbox and hbox separators
separator {
  min-width: 1px;
  min-height: 1px;
  background-color: $border;

  &.selection-mode.sidebar {
    background-color: $primary;
    border-color: $primary;
  }
}

//
// Lists
//
list {
  border-color: $border;
  background-color: $base;

  &.content:not(.conversation-listbox) {
    border: 1px solid $border;
    border-radius: $button_radius;

    > row:not(:first-child) { border-top: 1px solid $border; }
  }

  row { padding: 2px; }
}

row {
  @at-root %row_activatable, &.activatable {
    @include button(flat-normal);

    &:hover {
      @include button(flat-hover);
    }

    &.has-open-popup,
    &:active {
      @include button(flat-active);
    }

    &:selected {
      @extend %selected_items;

      &:hover { background-color: lighten($primary, 5%); }
    }
  }
}

//
// App Notifications
//
.app-notification {
  @extend %toolbar_osd;
  margin: 8px;
  padding: $space_size $space_size $space_size $space_size * 2;

  button { @extend %flat_button; }

  &.frame,
  border { border-style: none; }
}

//
// Expanders
//
expander {
  arrow {
    transition: all $shorter_duration $standard_curve;
    min-width: 16px;
    min-height: 16px;
    -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    -gtk-icon-transform: rotate(-90deg);

    &:dir(rtl) { -gtk-icon-transform: rotate(90deg); }
    &:checked { -gtk-icon-transform: unset; }

    color: $text-secondary;

    &:hover, &:active { color: $text; }
    &:disabled { color: $text-secondary-disabled; }

    &:selected {
      color: on($primary, secondary);

      &:hover, &:active { color: on($primary); }
      &:disabled { color: on($primary, secondary-disabled); }
    }
  }
}

//
// Calendar
//
calendar {
  margin: 2px;
  padding: 2px $space_size;
  border: 1px solid $border;
  color: $text;

  &:disabled { color: $text-disabled; }

  &:selected {
    border-radius: 3px;
    @extend %selected_items;
  }

  &.header {
    border-style: none none solid;
    border-radius: 0;
  }

  &.button { @extend %simple_flat_button; border-radius: 3px; }

  &.highlight {
    color: gtkalpha(currentColor, 0.45);
    font-weight: 500;
  }

  &:indeterminate { color: gtkalpha(currentColor, 0.3); }
}

//
// Dialogs
//
messagedialog { // Message Dialog styling
  &.background {
    background-color: $surface;

    .titlebar {
      min-height: $small_size;
      border-style: none;
      box-shadow: inset 0 1px highlight($surface);
      background-color: $surface;
      color: $text;

      &:backdrop { color: $text-secondary; }
    }

    entry { @extend %flat_entry; }

    .linked:not(.vertical).dialog-action-area > button:not(:only-child) {
      padding: $space_size $space_size * 2;
      border-top: 1px solid $border;
      border-radius: 0;
      @extend %flat_button;

      &:first-child {
        border-bottom-left-radius: 0;
        border-top-left-radius: 0;
      }

      &:last-child {
        border-bottom-right-radius: 0;
        border-top-right-radius: 0;
      }
    }

    @each $b_type, $b_color in (suggested-action, $suggested),
                               (destructive-action, $destructive) {
      .linked:not(.vertical).dialog-action-area > button.#{$b_type} {
        color: $b_color;
        transition: $shorter_transition,
                    $shadow_transition,
                    background-size $ripple_duration $deceleration_curve,
                    background-image $ripple_opacity_duration $deceleration_curve;

        &:hover {
          color: $b_color;
          background-color: transparent;
        }

        &:active {
          transition: $shorter_transition,
                      background-size 0,
                      background-image 0;
          animation: ripple_effect $shorter_duration $deceleration_curve forwards;
          color: on($primary);
          border-color: rgba($b_color, 0.75);
          box-shadow: inset 0 0 0 9999px rgba($b_color, 0.5);
          background-image: radial-gradient(circle farthest-corner at center,
                                            rgba($b_color, 0.5) 10%,
                                            transparent 0%);
          background-size: 0% 0%;
        }

        &:disabled { opacity: 0.65; }
      }
    }
  }

  &.background.csd { // rounded bottom border styling for csd version
    // bigger radius for better antialiasing
    border-bottom-left-radius: $button_radius;
    border-bottom-right-radius: $button_radius;

    .linked:not(.vertical).dialog-action-area > button:not(:only-child) {
      padding: 8px 16px;
      border-top: 1px solid $border;
      border-radius: 0;
      @extend %flat_button;

      &:first-child {
        border-bottom-left-radius: 2px;
        border-top-left-radius: 0;
      }

      &:last-child {
        border-bottom-right-radius: 2px;
        border-top-right-radius: 0;
      }
    }
  }
}

filechooser {
  .dialog-action-box { border-top: 1px solid $border; }

  #pathbarbox {
    border-bottom: 1px solid $border;
    background-color: $background;
  }
}

filechooserbutton:drop(active) {
  box-shadow: none;
}

//
// Sidebar
//
.sidebar {
  border-style: none;
  background-color: $surface;

  @at-root %sidebar_left,
  &:dir(ltr),
  &.left,
  &.left:dir(rtl) {
    border-right: 1px solid $border;
    border-left-style: none;
  }

  @at-root %sidebar_right
  &:dir(rtl),
  &.right {
    border-left: 1px solid $border;
    border-right-style: none;
  }

  list { background-color: transparent; }
  row { transition: none; }

  separator,
  .separator {
    min-height: 0;
    border-color: transparent;
    background-color: transparent;
  }

  paned & { &.left, &.right, &.left:dir(rtl), &:dir(rtl), &:dir(ltr), & { border-style: none; }}
}

separator.sidebar {
  min-width: 0;
  padding: 0;

  headerbar > & {
    &:dir(ltr),
    &.left,
    &.left:dir(rtl) {
      border-right: none
    }

    &:dir(rtl),
    &.right {
      border-left: none;
      border-right-style: none;
    }
  }
}

stacksidebar {
  &.sidebar {
    &:dir(ltr),
    &.left,
    &.left:dir(rtl) { list { @extend %sidebar_left; }}

    &:dir(rtl),
    &.right { list { @extend %sidebar_right; }}
  }

  row {
    padding: ($space_size + 4px) $space_size;
    transition: none;
    > label {
      padding-left: $space_size;
      padding-right: $space_size;
    }

    &.needs-attention > label { @extend %needs_attention; }
  }
}

//
// File chooser
//
placessidebar {
  background-color: $background;

  > viewport.frame { border: none; }

  list { padding: (4px - 3px) 0 4px; }

  row {
    // Needs overriding of the GtkListBoxRow padding
    min-height: 32px;
    margin: -1px 0; // Remove unknown margins
    padding: 0;

    // Using margins/padding directly in the SidebarRow
    // will make the animation of the new bookmark row jump
    > revealer { padding: 0 12px; }

    &:selected {
      color: on($primary);

      button.sidebar-button {
        color: on($primary, secondary);

        &:hover, &:active, &:checked {
          background-color: $track;
          color: on($primary);
        }

        &:disabled { color: on($primary, secondary-disabled); }

        &:checked:disabled {
          background-color: rgba(white, 0.12);
          color: on($primary, disabled);
        }
      }
    }

    &:disabled { color: $text-disabled; }

    image.sidebar-icon {
      opacity: 0.45; // dim the device icons

      &:dir(ltr) { padding-right: 8px; }
      &:dir(rtl) { padding-left: 8px; }
    }

    label.sidebar-label {
      &:dir(ltr) { padding-right: 2px; }
      &:dir(rtl) { padding-left: 2px; }
    }

    button.sidebar-button {
      @extend %simple_flat_button;
      @extend %small_button;
    }

    &.sidebar-placeholder-row {
      min-height: 2px;
      padding: 0 8px;
      background-image: image($accent);
      background-clip: content-box;
    }

    &.sidebar-new-bookmark-row { color: $accent; }

    &:drop(active):not(:disabled) {
      box-shadow: inset 0 0 0 2px $accent;
    }
  }
}

placesview {
  .server-list-button > image { -gtk-icon-transform: rotate(0turn); }
  .server-list-button:checked > image { -gtk-icon-transform: rotate(-0.5turn); }

  // this selects the "connect to server" label
  > actionbar > revealer > box > label {
    padding-left: 8px;
    padding-right: 8px;
  }
}


//
// Paned
//
paned {
  > separator {
    min-width: 1px;
    min-height: 1px;
    -gtk-icon-source: none; // defeats the ugly default handle decoration
    border-style: none; // just to be sure
    background-color: transparent;
    background-image: image($solid-border);
    background-size: 1px 1px;

    &.wide {
      min-width: 6px;
      min-height: 6px;
      background-color: $background;
      background-image: image($solid-border), image($solid-border);
      background-size: 1px 1px, 1px 1px;
    }
  }

  &.horizontal > separator {
    background-repeat: repeat-y;

    &:dir(ltr) {
      margin: 0 -8px 0 0;
      padding: 0 8px 0 0;
      background-position: left;
    }

    &:dir(rtl) {
      margin: 0 0 0 -8px;
      padding: 0 0 0 8px;
      background-position: right;
    }

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-y, repeat-y;
      background-position: left, right;
    }
  }

  &.vertical > separator {
    margin: 0 0 -8px 0;
    padding: 0 0 8px 0;
    background-repeat: repeat-x;
    background-position: top;

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-x, repeat-x;
      background-position: bottom, top;
    }
  }
}

//
// GtkInfoBar
//
infobar {
  border-style: none;

  &.info > revealer > box { background-color: $info; }
  &.question > revealer > box { background-color: $question; }
  &.warning > revealer > box { background-color: $warning; }
  &.error > revealer > box { background-color: $error; }

  &.info,
  &.question,
  &.warning,
  &.error {
    > label, & { color: on($primary); }

    button { @extend %selected_button; }
    *:link { color: on($primary); }
  }
}

// Buttons on selected backgrounds
%selected_button {
  color: on(dark);
  background-color: transparentize(on(dark), 1);
  border: 1px solid transparentize(on(dark), 0.5);
  box-shadow: none;

  &.flat {
    color: on(dark);
    background-color: transparentize(on(dark), 1);
    box-shadow: none;
    &:disabled {
      &, label { color: transparentize(on(dark), 0.6); }
      box-shadow: none;
    }
  }

  &:hover {
    color: on(dark);
    background-color: transparentize(on(dark), 0.8);
    border-color: transparentize(on(dark), 0.2);
    box-shadow: none;
  }

  &:active, &:active:hover, &:checked {
    color: on(dark);
    background-color: transparentize(on(dark), 0.9);
    border-color: transparentize(on(dark), 0.2);
    box-shadow: none;
  }

  &:disabled {
    &, label { color: transparentize(on(dark), 0.5); }
    background-color: transparentize(on(dark), 1);
    border-color: transparentize(on(dark), 0.6);
    box-shadow: none;

    &:active, &:checked {
      color: on(dark);
      background-color: transparentize(on(dark), 0.5);
      border-color: transparentize(on(dark), 0.6);
      box-shadow: none;
    }
  }
}

//
// Tooltips
//
tooltip {
  &.background {
    // background-color needs to be set this way otherwise it gets drawn twice
    // see https://bugzilla.gnome.org/show_bug.cgi?id=736155 for details.
    box-shadow: inset 0 1px highlight($base);
    background-color: gtkalpha($base, 0.97);
  }

  // padding: 4px; /* not working */
  border-radius: 3px;
  box-shadow: none; // otherwise it gets inherited by windowframe.csd

  &:not(.csd) {
    border: 1px solid $border;
    background-clip: $extra_background_clip;
  }

  // FIXME: we need a border or tooltips vanish on black background.
  decoration { background-color: transparent; }

  label {
    // tooltip label has already 6px margins
    min-height: 32px - 6px * 2;
    padding: 0 8px - 6px;
  }
}

//
// Color Chooser
//
colorswatch {
  // This widget is made of two boxes one on top of the other, the lower box is colorswatch {} the other one
  // is colorswatch overlay {}, colorswatch has the programmatically set background, so most of the style is
  // applied to the overlay box.

  // base color corners rounding
  // to avoid the artifacts caused by rounded corner anti-aliasing the base color
  // sports a bigger radius.
  // nth-child is needed by the custom color strip.

  &.top {
    border-top-left-radius: $button_radius + 0.5px;
    border-top-right-radius: $button_radius + 0.5px;

    overlay {
      border-top-left-radius: $button_radius;
      border-top-right-radius: $button_radius;
    }
  }

  &.bottom {
    border-bottom-left-radius: $button_radius + 0.5px;
    border-bottom-right-radius: $button_radius + 0.5px;

    overlay {
      border-bottom-left-radius: $button_radius;
      border-bottom-right-radius: $button_radius;
    }
  }

  &.left,
  &:first-child:not(.top) {
    border-top-left-radius: $button_radius + 0.5px;
    border-bottom-left-radius: $button_radius + 0.5px;

    overlay {
      border-top-left-radius: $button_radius;
      border-bottom-left-radius: $button_radius;
    }
  }

  &.right,
  &:last-child:not(.bottom) {
    border-top-right-radius: $button_radius + 0.5px;
    border-bottom-right-radius: $button_radius + 0.5px;

    overlay {
      border-top-right-radius: $button_radius;
      border-bottom-right-radius: $button_radius;
    }
  }

  &.dark overlay { color: on(dark); }
  &.light overlay { color: on(dark); }
  &.dark { color: on(dark); } // for focus ring
  &.light { color: on(dark); } // for focus ring

  &:drop(active) {
    box-shadow: none;

    &.light overlay {
      box-shadow: $shadow_1, 0 0 0 2px $accent;
    }

    &.dark overlay {
      box-shadow: $shadow_1, 0 0 0 2px $accent;
    }
  }

  overlay {
    transition: $shadow_transition;
    box-shadow: $shadow_1;

    &:hover { box-shadow: $shadow_2; }
  }

  &#add-color-button {
    border-radius: $button_radius $button_radius 0 0;
    color: on(dark); // for focus ring

    &:only-child { border-radius: $button_radius; }

    overlay {
      background-image: linear-gradient(to right,
                                        $error 25%,
                                        $warning 25%, $warning 50%,
                                        $info 50%, $info 75%,
                                        $question 75%);
      color: on(dark);
    }
  }

  &:disabled {
    opacity: 0.3;

    overlay { box-shadow: none; }
  }

  &#editor-color-sample {
    border-radius: $button_radius + 0.5px;

    overlay { border-radius: $button_radius; }

    // overlay:hover { box-shadow: $shadow_1; }
  }
}

// colorscale popup
colorchooser .popover.osd {
  transition: $shadow_transition;
  border-radius: 2px;
  box-shadow: $shadow_2, inset 0 1px highlight($base);
  background-color: $base;

  &:backdrop { box-shadow: $shadow_1, inset 0 1px highlight($base); }
}

//
// Misc
//
//content view (grid/list)
.content-view {
  background-color: $background;

  rubberband { @extend rubberband; }
}

//
// Window Decorations
//
decoration {
  transition: $shadow_transition;
  border-radius: $window_radius $window_radius 0 0;
  box-shadow: $shadow_5, 0 16px 16px 2px rgba(black, 0), 0 6px 18px 5px rgba(black, 0);

  // FIXME rationalize shadows

  // this is used for the resize cursor area
  margin: 4px;

  &:backdrop {
    // the transparent shadow here is to enforce that the shadow extents don't
    // change when we go to backdrop, to prevent jumping windows.
    // The biggest shadow should be in the same order then in the active state
    // or the jumping will happen during the transition.
    box-shadow: $shadow_4, 0 16px 16px 2px rgba(black, 0), 0 6px 18px 5px rgba(black, 0);
  }

  .maximized &,
  .fullscreen &,
  .tiled & { border-radius: 0; }

  .popup & { box-shadow: none; }

  // server-side decorations as used by mutter
  .ssd & { box-shadow: 0 3px 3px rgba(black, 0.16); } //just doing borders, wm draws actual shadows

  .csd.popup & {
    border-radius: $menu_radius;
    box-shadow: $shadow_4;
  }

  tooltip.csd & {
    border-radius: $button_radius;
    box-shadow: $shadow_4;
  }

  messagedialog.csd & {
    border-radius: $window_radius;
    box-shadow: $shadow_4;
  }

  .solid-csd & {
    margin: 0;
    padding: 1px 2px 2px;
    border: 1px solid if($topbar == 'light', darken($header, 18%), darken($header, 10%));
    border-radius: 0;
    box-shadow: inset 0 0 0 2px $header, inset 0 1px highlight($header);
    background-color: $solid-border;
  }
}

// catch all extend :)
%selected_items {
  background-color: $primary;
  color: on($primary);

  &:disabled { color: on($primary, disabled); }
}

.monospace { font-family: monospace; }

//
// Title buttons
//

%windows_button {
  margin: 0;
  padding: 0;
  min-width: 26px;
  min-height: 26px;
  animation: none;
  box-shadow: none;
  border: none;
  color: transparent;
  background-color: transparent;
  background-position: center;
  background-repeat: no-repeat;
  background-size: 16px 16px;

  &:hover, &:active, &:checked {
    box-shadow: none;
    border: none;
    color: transparent;
    animation: none;
    transition: background-size $shorter_duration $deceleration_curve;
    background-color: transparent;
    background-size: 22px 22px;
  }

  &:backdrop {
    opacity: 1;
    color: transparent;
  }
}

%titlebuttons {
  button.titlebutton {
    &:hover { @include button(header-hover); }
    &:active, &:checked { @include button(header-active); }

    &.close, &.maximize, &.minimize { @extend %windows_button; }

    // Load png assets for each button
    @each $k in ('close', 'maximize', 'minimize') {
      @each $l, $m in ('',''), (':backdrop','-backdrop'), (':hover','-hover'), (':active','-active') {

        &.#{$k}#{$l} { background-image: -gtk-scaled(url('assets/window-assets/titlebutton-#{$k}#{$m}#{$darker_asset_suffix}.png'),
                                                     url('assets/window-assets/titlebutton-#{$k}#{$m}#{$darker_asset_suffix}@2.png')); }
      }
    }
  }

  .fullscreen &,
  .maximized & {
    button.titlebutton {
      @each $l, $m in ('',''), (':backdrop','-backdrop'), (':hover','-hover'), (':active','-active') {
      &.maximize#{$l} { background-image: -gtk-scaled(url('assets/window-assets/titlebutton-restore#{$m}#{$darker_asset_suffix}.png'),
                                                      url('assets/window-assets/titlebutton-restore#{$m}#{$darker_asset_suffix}@2.png')); }
      }
    }
  }
}


headerbar,
.titlebar {
  @if $titlebutton == 'default' {
    @extend %titlebuttons;

    > box.right, > box.left {
      padding: 0 $space_size;
    }
  } @else {
    button.titlebutton.close {
      border-radius: $button_radius;
      -gtk-outline-radius: $button_radius;
    }
  }
}

%solid_titlebuttons {
  button.titlebutton {
    &.close, &.maximize, &.minimize { @extend %windows_button; }

    // Load png assets for each button
    @each $k in ('close', 'maximize', 'minimize') {
      @each $l, $m in ('',''), (':backdrop','-backdrop'), (':hover','-hover'), (':active','-active') {

      &.#{$k}#{$l} { background-image: -gtk-scaled(url('assets/window-assets/titlebutton-#{$k}#{$m}#{$darker_asset_suffix}.png'),
                                                   url('assets/window-assets/titlebutton-#{$k}#{$m}#{$darker_asset_suffix}@2.png')); }
      }
    }
  }

  .maximized & {
    button.titlebutton {
      @each $l, $m in ('',''), (':backdrop','-backdrop'), (':hover','-hover'), (':active','-active') {
      &.maximize#{$l} { background-image: -gtk-scaled(url('assets/window-assets/titlebutton-restore#{$m}#{$darker_asset_suffix}.png'),
                                                      url('assets/window-assets/titlebutton-restore#{$m}#{$darker_asset_suffix}@2.png')); }
      }
    }
  }
}

// solid-csd Window manager buttons
@if $titlebutton == 'default' {
  headerbar:not(.default-decoration) { @extend %solid_titlebuttons; }
}
//
// Touch Copy & Paste
//
//touch selection handlebars for the Popover.osd above
cursor-handle {
  border-radius: $circular_radius;
  background-color: $accent;
  background-image: none;

  &.top:dir(ltr), &.bottom:dir(rtl) {
    padding-left: $space_size;
    border-top-right-radius: 0;
  }

  &.bottom:dir(ltr), &.top:dir(rtl) {
    padding-right: $space_size;
    border-top-left-radius: 0;
  }

  &.insertion-cursor:dir(ltr), &.insertion-cursor:dir(rtl) {
    -GtkWidget-text-handle-width: 24;
    -GtkWidget-text-handle-height: 30;

    $_url: 'assets/slider-horz-scale-has-marks-above#{$asset_suffix}';
    -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                  url('#{$_url}@2.png'));
  }
}

.context-menu { font: initial; } // Decouple the font of context menus from their entry/textview

%circular_button,
button.circular { // FIXME: aggregate to buttons
  border-radius: $circular_radius;
  -gtk-outline-radius: $circular_radius;
}

button.circular { row & { margin: 0 5px; } } // Make the circular button hover shadow on row fully displayed

%small_button {
  min-height: $small_size;
  min-width: $small_size;
  padding: 0;
  border-radius: $circular_radius;
  -gtk-outline-radius: $circular_radius;
}

// shortcut window keys
.keycap {
  min-width: 28px - 8px * 2;
  min-height: 28px - 2px;
  margin-top: 2px;
  padding-bottom: 2px;
  padding-left: 8px;
  padding-right: 8px;

  border: solid 1px $border;
  border-radius: 2px + 1px;
  box-shadow: inset 0 -2px $border;
  background-color: $base;
  color: $text;
  font-size: smaller;
}

:not(decoration):not(window):drop(active) { // FIXME needs to be done widget by widget, this wildcard should really die
  transition: $shorter_transition;
  box-shadow: $shadow_1, inset 0 0 0 2px $accent;
  caret-color: $accent;
}

%stackswitcher_button {
  transition: $shorter_transition,
  border-image $ripple_duration $deceleration_curve;
  margin: 0;
  background-image: none;
  color: $text-secondary;
  background-color: transparent;
  box-shadow: none;
  border-image: radial-gradient(circle closest-corner at center calc(100% - 1px),
                      transparent 0%,
                      transparent 0%)
                      0 0 2 / 0 0 0;
  
  &:hover {
    color: $text;
    box-shadow: inset 0 -2px $overlay-active;
    background-color: transparent;
  }
  
  &:active {
    animation: none;
    box-shadow: none;
    background-color: transparent;
    color: $text;
    background-image: none;
    border-image: radial-gradient(circle closest-corner at center calc(100% - 1px),
                          $primary 100%,
                          $overlay-active 0%)
                          0 0 2 / 0 0 2px;
  }
  
  &:checked {
    color: $text;
    box-shadow: inset 0 -2px $primary;
    background-color: transparent;
    
    &:disabled {
      color: $text-disabled;
      box-shadow: inset 0 -2px rgba($primary, 0.35);
      background-color: transparent;
    }
  }
  
  &:disabled {
    color: $text-secondary-disabled;
    box-shadow: none;
    background-color: transparent;
  }
}

stackswitcher.linked {
  background-color: $surface;
  border-radius: $button_radius;
  border: none;
  padding: 0 $space_size;

  > button {
    &:not(.destructive-action):not(.suggested-action):not(.combo) { @extend %stackswitcher_button; }

    &,
    &:only-child,
    &:first-child,
    &:last-child { border-radius: 0; }

    &.text-button { min-width: 100px; } // FIXME aggregate with buttons

    &.circular,
    &.text-button.circular { // FIXME aggregate with buttons
      min-width: $medium_size;
      min-height: $medium_size;
      border-radius: $circular_radius;
      -gtk-outline-radius: $circular_radius;
      padding: 0;
    }
  }
}

//
// Emoji
//
popover.emoji-picker {
  padding: 0;

  entry {
    @extend %flat_entry;
  }

  scrolledwindow { border-bottom: 1px solid $border; }

  // mimic tab style
  button.emoji-section:not(.destructive-action):not(.suggested-action) {
    margin-top: -1px;
    padding: 0 ($space_size + 2px);
    min-width: 24px;
    min-height: $medium_size;
    border-radius: 0;
    outline-offset: -6px;
    box-shadow: none;

    &:hover { box-shadow: inset 0 2px $track; }

    &:active {
      box-shadow: inset 0 2px $primary;
      background-image: radial-gradient(circle farthest-corner at center,
                                        $fill 10%,
                                        transparent 0%);
    }

    &:checked {
      box-shadow: inset 0 2px $primary;
      background-color: transparent;
    }

    &:first-child { margin-left: $space_size; }
    &:last-child { margin-right: $space_size; }
  }

  .emoji {
    min-width: 3em;
    min-height: 3em;
    padding: 0;
    // font-size: large;

    widget {
      transition: $shorter_transition;
      border-radius: $button_radius;

      &:hover {
        background-color: rgba($primary, 0.2);
      }
    }
  }
}

//
// Unified window (> = Gnome 40)
//

window.background.csd.unified {
  headerbar {
    box-shadow: $header_shadow;

    &.selection-mode {
      box-shadow: $header_shadow;
    }
  }

  // ...and add it on the window itself
  > decoration-overlay {
    box-shadow: inset 0 1px highlight($header);
  }

  &,
  > decoration,
  > decoration-overlay {
    border-radius: $button_radius;
  }

  &.tiled,
  &.tiled-top,
  &.tiled-right,
  &.tiled-bottom,
  &.tiled-left,
  &.maximized,
  &.fullscreen {
    > decoration-overlay {
      box-shadow: none;
    }

    &,
    > decoration,
    > decoration-overlay {
      border-radius: 0;
    }
  }
}
